# Verilog
Note;Getting Started &amp;Verilog Language(Basics,Vectors)

Verilog写一个存储器。实现：DSP发送的数据存储到FPGA存储器中，DSP也可以随时读取存储器的数据。

1.  知道存储器的功能引脚：数据线，使能端，时钟信号，输出端。
2.  64x的EMIF是用于片外存储器扩展和外部数据接口的一种并行数据传输片上外设。
    （1）时钟信号，图中ECLKIN为总线输入时钟，用以控制EMIF数据传输的总线频率ECLKOUT输出EMIF的
    实际总线时钟信号，用来与外部存储器读/写同步。
    （2）数据/地址信号，图中ED为数据线，EMIFA具有数据长度选择模式，可以选择8bit，16bit，32bit，64bit。
    （3）控制信号，控制信号包括存储器读/写信号，与FPGA数据传输时，只用到了CE、AWE、AOE三个信号。
    CE为片选空间使能信号，AWE为DSP往数据总线写数据使能信号，AOE为DSP读取数据总线数据使能信号。
    FPGA检测到CE与AOE同时低，则接收DSP发送的数据；FPGA检测到CE与AWE同时低，则向DSP发送数据。
    （4）片选信号，EMIF有4组片选信号，每一组选择一个确定的地址空间。每一组片选空间和不同的外部存储器
    相连。一般选择CE2与FPGA进行数据传输。
    
    EDMA是增强直接存储器存取方式。在DSP与FPGA的数据传输中，EDMA的主要功能是：存储空间之间的数据块搬移。
    
    
    代码：
    module Register(

           inout   [15:0] data,  //双向传输数据。
           input   [10:0] addr,
           input   clk,
           input   write_en,
           input   read_en,
           input   ce0
//           output  [15:0] read_data
//           output  reg [15:0]  myreg1 错误写法，myreg1内部寄存器。              
    );

    reg myreg1;
    
    //向寄存器中写数据，要满足写使能、读取FPGA中的指定寄存器的地址，DSP片选CE。
    always @ (posedge clk) begin
        if( write_en == 1'b1  &&  addr == 4'b0 &&  ce0==0 )
            myreg1 <= data;
    end

//    always @ (posedge clk) begin
//        if( write_en == 1'b1  &&  addr == 8'b4 &&  ce1==0 )
//            myreg2 <= data;
//    end
    
    //在寄存器中读数据
    assign data = ( read_en == 1 && addr == 4'b0 &&  ce0==0 ) ? myreg1 : 32'bz;
//    assign data = (read_en == 1 && addr == 8'b4 &&  ce1==0 ) ? myreg2 : 32'bz;

ila_0 your_instance_name (
	.clk(clk), // input wire clk


	.probe0(data), // input wire [14:0]  probe0  
	.probe1(addr), // input wire [3:0]  probe1 
	.probe2(write_en), // input wire [0:0]  probe2 
	.probe3(read_en), // input wire [0:0]  probe3 
	.probe4(ce0) // input wire [0:0]  probe4
);
endmodule
